export macro prefix_expression ->
    whitespace, '/',
    prefix_expression/e,
{
    e = e.execute(__context__);
    return 1.0.__truediv__(e);
}

export macro prefix_expression ->
    whitespace, '-',
    prefix_expression/e,
{
    e = e.execute(__context__);
    return e.__neg__();
}

export macro prefix_expression ->
    postfix_expression/e,
{
    return e.execute(__context__);
}



export macro exponentiation_expression ->
    prefix_expression/b,
    whitespace, '^',
    exponentiation_expression/p,
{
    p = p.execute(__context__);
    b = b.execute(__context__);
    return b.__pow__(p);
}

export macro exponentiation_expression ->
    prefix_expression/e,
{
    return e.execute(__context__);
}



export macro multiplicative_expression ->
    multiplicative_expression/a,
    whitespace, '*',
    exponentiation_expression/b,
{
    a = a.execute(__context__);
    b = b.execute(__context__);
    return a.__mul__(b);
}

export macro multiplicative_expression ->
    multiplicative_expression/a,
    whitespace, '/',
    exponentiation_expression/b,
{
    a = a.execute(__context__);
    b = b.execute(__context__);
    return a.__truediv__(b);
}

export macro multiplicative_expression ->
    multiplicative_expression/a,
    whitespace, '%',
    exponentiation_expression/b,
{
    a = a.execute(__context__);
    b = b.execute(__context__);
    return a.__mod__(b);
}

export macro multiplicative_expression ->
    exponentiation_expression/e,
{
    return e.execute(__context__);
}



export macro additive_expression ->
    additive_expression/a,
    whitespace, '+',
    multiplicative_expression/b,
{
    a = a.execute(__context__);
    b = b.execute(__context__);
    return a.__add__(b);
}

export macro additive_expression ->
    additive_expression/a,
    whitespace, '-',
    multiplicative_expression/b,
{
    a = a.execute(__context__);
    b = b.execute(__context__);
    return a.__sub__(b);
}

export macro additive_expression ->
    multiplicative_expression/e,
{
    return e.execute(__context__);
}



export macro expression ->
    additive_expression/e,
{
    return e.execute(__context__);
}
